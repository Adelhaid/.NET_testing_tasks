/*/////////////////////////////
Author: Tigran Arsenyan. ///
Name: .NET Testing Tasks. ///
*//////////////////////////////

#include <iostream>
#include <conio.h>

using namespace std;

//Функция сортировки заданного массива «пузырьком».
void sortBubble(int a[], int n) {
	int temp;
	bool sortDone = false;
	while (!sortDone) //Выполнение цикла "while" до тех пор, пока значение sortDone не будет "true".
	{
		sortDone = true; //Завершение цикла "while" с одной "прокруткой".
		for (int i = 0; i < n - 1; i++) //Инициализация цикла "for", действующего до значения "n-1".
		{
			if (a[i] > a[i + 1])
			{
				temp = a[i];
				a[i] = a[i + 1];
				a[i + 1] = temp;
				sortDone = false;
			}
		}
	}
}

//Функция вывода заданного массива в консоль.
void printArray(const int a[], int n)
{
	for (int i(0); i < n; i++)
		cout << "A[" << i << "] = " << a[i] << endl;
}

//Функция поиска заданного значения в отсортированном массиве.
void findNumber(const int a[], int n, double b) {
	if (b - int(b) == 0)
	{
		cout << "Введенное число является целым. Запуск цикла поиска в массиве.\n";
		for (int i = 0; i < 5; i++)
		{
			if (a[i] == b)
			{
				cout << "A[" << i << "] является данным числом." << endl;
			}
			else
			{
				cout << "A[" << i << "] не является данным числом." << endl;
			}
		}
	}
	else cout << "Введенное число не является целым. Остановка цикла поиска в массиве.\n";
}

//Функция подсчета символов в заданной строке.
bool symbsChecker(char ch)
{
	if (ch == ' ' || ch == ',' || ch == '.' || ch == '(' || ch == ')' || ch == '"')
	{
		return true;
	}
	else
		return false;
}

//Функция вывода слов, встречающихся в строке только один раз.
//Внимание! Данная функция была реализована не без помощи других людей.
int wordsChecker() {
	string s = "The kangaroo is a marsupial from the family Macropodidae (macropods, meaning \"large foot\")."; //Заданная строка.
	string temp; //Массив, в котором будут хранится буквы слова.
	string* str; //Массив, в котором будут хранится слова.
	int index = 0; //Переменная, хранящая элементы строки.
	int counter = 0; //Переменная, хранящая число интервалов (знаков препинания) между словами в строке.
	int size; //Переменная, хранящая размерность массива (строки).

	cout << "\nЗаданная строка:\n\"" << s << "\"\n\n" << "Слова, которые повторяются в данной строке только один раз:\n";

	while (s[index]) //Цикл продолжается до тех пор, пока не будет найден нулевой символ.
	{
		if (symbsChecker(s[index])) //Если функция symbsChecker возвращает "true", значит был обнаружен символ.
		{
			while(symbsChecker(s[index]))
			{
				index++; //Подсчёт количества символов в строке.
			}
			counter++; //Подсчёт количества знаков препинания в строке.
		}
		else index++; //Если функция symbsChecker возвращает "false", проверяем следующий элемент строки.
	}

	size = counter; //Определение размерности массива.
	str = new string[size]; //Определение массива с заданным размером.
	counter = 0; //Обнуление счётчика знаков препинания.
	index = 0; //Обнуление счётчика символов строки.

	while (s[index]) //Цикл продолжается до тех пор, пока не будет найден нулевой символ.
	{
		if (!symbsChecker(s[index])) //Если символ не является знаком препинания, то цикл продолжается.
		{
			temp += s[index]; //Сохранение букв слова в переменную "temp".
			if (!s[index + 1]) //Если встречается символ на следующей позиции, цикл запускается.
			{
				str[counter] = temp; //Сохранение букв в массив, хранящий слова (составленное слово).
				temp.clear();
				counter++; //Увеличение размерности массива.
			}
		}
		else
		{
			if (temp != "") //Если в переменной "temp" остались буквы.
			{
				str[counter] = temp; //Сохранение букв в массив, хранящий слова (составленное слово).
				temp.clear();
				counter++; //Увеличение размерности массива.
			}
		}
		index++; //Прокрутка счётчика символов строки.
	}

	for (int i = 0; i < size; i++)
	{
		cout << str[i] << "\n"; //Вывод слов, повторяющихся в строке только один раз.
	}

	return 0;
}

//Функция нахождения факториала числа n.
void calcFactorial(long double n) {
	long double factorialStep = n; //Переменная для хранения возвращаемого результата рекурсивной функцией.
	long double result;

	if (n - int(n) == 0 || n >= 0)
	{
		cout << "Введенное значение является неотрицательным целым числом. Запуск функции нахождения факториала.\n\n";
		if (n == 0 || n == 1) //Частные решения — факториалы 0 и 1, равные единице.
		{
			result = 1;
			cout << "!" << n << " = " << result << ".\n";
		}
		else
		{
			for (int i = n - 1; i > 0; i--)
				factorialStep *= i;
			result = factorialStep;
			cout << "!" << n << " = " << result << ".\n";
		}
	}
	else cout << "Введенное значение не является неотрицательным целым числом. Остановка функции нахождения факториала.\n";
}

//Функция проверки правильной скобочной последовательности.
void bracketsChecker() {
	cout << "\nФункция выполнения выбранного задания в данной программе не реализована :(.\n";
}

int main() {
	setlocale(LC_ALL, "Russian");

	int taskNumber; //Переменная, хранящая номер тестового задания.
	double inputNumber; //Переменная, хранящая число для поиска в массиве для задания №2.
	int Arr[5] = { 142, 54, 67, 98, 10 }; //Заданный массив для задания №1 и 2.


	cout << "\tДоброго времени суток!\n\nВведите номер задания, которое Вы хотите проверить:\n\n1. Сортировка массива.\n2. Поиск значения в заданном массиве.\n3. Вывод слов в строке.\n4. Нахождение факториала.\n5. Проверка скобочной последовательности.\n\nНомер задания: ";
	cin >> taskNumber;

	switch (taskNumber) {
	case 1: //Вызов функции сортировки заданного массива «пузырьком».
		cout << "Вы выбрали задание №" << taskNumber << ".\n\n";
		cout << "Заданный массив целых чисел:\n\n";
		printArray(Arr, 5);
		sortBubble(Arr, 5);
		cout << "\n\nОтсортированный массив целых чисел:\n\n";
		printArray(Arr, 5);
		cout << "\nЗавершение работы программы.\n";
		break;
	case 2: //Вызов функции поиска введенного целого числа в заданном массиве.
		cout << "Вы выбрали задание №" << taskNumber << ".\n";
		cout << "Заданный массив целых чисел:\n\n";
		printArray(Arr, 5);
		sortBubble(Arr, 5);
		cout << "\n\nОтсортированный массив целых чисел:\n\n";
		printArray(Arr, 5);
		cout << "\n\nВведите целое число для поиска в заданном массиве: ";
		cin >> inputNumber;
		findNumber(Arr, 5, inputNumber);
		cout << "\nЗавершение работы программы.\n";
		break;
	case 3: //Вызов функции вывода слов, встречающихся в строке только один раз.
		cout << "Вы выбрали задание №" << taskNumber << ".\nВнимание! Данное задание было выполнено не без помощи других людей.\n";
		wordsChecker();
		cout << "\nЗавершение работы программы.\n";
		break;
	case 4: //Вызов функции нахождения факториала числа n.
		cout << "Вы выбрали задание №" << taskNumber << ".\n";
		int n;
		cout << "\nВведите неотрицательное целое число для нахождения его факториала: ";
		cin >> n;
		calcFactorial(n);
		cout << "\nЗавершение работы программы.\n";
		break;
	case 5: //Вызов функции проверки правильной скобочной последовательности.
		cout << "Вы выбрали задание №" << taskNumber << ".\n";
		bracketsChecker();
		cout << "\nЗавершение работы программы.\n";
		break;
	default:
		cout << "Вы ввели неправильный символ.\nЗавершение работы программы.\n\n";
	}

	_getch();
	return 0;
}
